import React from 'react';

type TopStudent = {
  student_id: number
  student_name: string
  average: number
  total: number
  stream: string
  class_name: string
  position: number
}

type SubjectChampion = {
  student_name: string
  stream: string
  marks: number
  subject: string
  class_name: string
}

type StreamRanking = {
  class_name: string
  stream: string
  average: number
  stream_average: number
  grade: string
  position: number
}

type PieChartData = {
  streams: Array<{ name: string; value: number }>
  subjects: Array<{ name: string; value: number }>
}

type DashboardData = {
  top_students_per_stream: TopStudent[]
  subject_champions_per_stream: SubjectChampion[]
  stream_rankings: StreamRanking[]
  pie_chart_data: PieChartData
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658', '#FF7C7C']

export default function Dashboard({ filters }: { filters?: DashboardFilters }) {
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [noDataResponse, setNoDataResponse] = useState(false)

  useEffect(() => {
    fetchDashboardData()
  }, [filters])

  const fetchDashboardData = async () => {
    try {
      setLoading(true)
      setError(null)
      setNoDataResponse(false)

      const params = new URLSearchParams()
      if (filters?.term) params.append('term', filters.term)
      if (filters?.academicYear) params.append('academic_year', filters.academicYear)
      if (filters?.examType) params.append('exam_type', filters.examType)

      const response = await authFetch(`/api/input-marks/dashboard-analytics/?${params}`)

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (data.message === 'No data available for the selected filters') {
        setNoDataResponse(true)
        setDashboardData(null)
      } else {
        setDashboardData(data.data)
        setNoDataResponse(false)
      }
    } catch (err) {
      console.error('Error fetching dashboard data:', err)
      setError(err instanceof Error ? err.message : 'Failed to fetch dashboard data')
    } finally {
      setLoading(false)
    }
  }

  const groupByStream = (students: TopStudent[]) => {
    const grouped: { [key: string]: TopStudent[] } = {}
    students.forEach(student => {
      if (!grouped[student.stream]) {
        grouped[student.stream] = []
      }
      grouped[student.stream].push(student)
    })
    return grouped
  }

  const groupByClass = (champions: SubjectChampion[]) => {
    const grouped: { [key: string]: SubjectChampion[] } = {}
    champions.forEach(champion => {
      if (!grouped[champion.class_name]) {
        grouped[champion.class_name] = []
      }
      grouped[champion.class_name].push(champion)
    })
    return grouped
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="h-20 bg-gray-200 rounded-xl animate-pulse" />
          ))}
        </div>
        <div className="h-64 bg-gray-200 rounded-xl animate-pulse" />
        <div className="h-96 bg-gray-200 rounded-xl animate-pulse" />
      </div>
    )
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-xl p-6 text-center">
        <h3 className="text-lg font-semibold text-red-800 mb-2">Error Loading Dashboard</h3>
        <p className="text-red-600 mb-4">{error}</p>
        <button
          onClick={fetchDashboardData}
          className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
        >
          Try Again
        </button>
      </div>
    )
  }

  if (noDataResponse) {
    return (
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-6 text-center">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">No Data Available</h3>
        <p className="text-blue-600">No dashboard data found for the selected filters. Please try different filter options.</p>
      </div>
    )
  }

  if (!dashboardData) {
    return null
  }

  const groupedTopStudents = groupByStream(dashboardData.top_students_per_stream)
  const groupedChampions = groupByClass(dashboardData.subject_champions_per_stream)

  return (
    <div className="space-y-6">
      {/* Pie Charts */}
      <section className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <div className="bg-white border border-gray-200 rounded-xl p-4">
          <h3 className="text-lg font-semibold mb-4 text-center">Top Students by Stream</h3>
          {dashboardData.pie_chart_data.streams.length > 0 ? (
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={dashboardData.pie_chart_data.streams}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {dashboardData.pie_chart_data.streams.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          ) : (
            <div className="h-64 grid place-items-center text-gray-400">No stream data available</div>
          )}
        </div>
        
        <div className="bg-white border border-gray-200 rounded-xl p-4">
          <h3 className="text-lg font-semibold mb-4 text-center">Subject Champions</h3>
          {dashboardData.pie_chart_data.subjects.length > 0 ? (
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={dashboardData.pie_chart_data.subjects}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {dashboardData.pie_chart_data.subjects.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          ) : (
            <div className="h-64 grid place-items-center text-gray-400">No subject data available</div>
          )}
        </div>
      </section>

      {/* Top 3 Students per Stream */}
      {Object.keys(groupedTopStudents).length > 0 && (
        <section className="space-y-4">
          <h2 className="text-xl font-bold text-gray-900">Top 3 Students per Stream</h2>
          {Object.entries(groupedTopStudents).map(([stream, students]) => (
            <div key={stream} className="bg-white border border-gray-200 rounded-xl overflow-hidden">
              <div className="p-4 border-b border-gray-200 bg-gray-50">
                <h3 className="text-lg font-semibold">Stream: {stream}</h3>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full text-sm">
                  <thead className="bg-gray-50 text-gray-600">
                    <tr>
                      <th className="text-left p-3 font-medium">Student Name</th>
                      <th className="text-right p-3 font-medium">Average</th>
                      <th className="text-right p-3 font-medium">Total</th>
                      <th className="text-left p-3 font-medium">Stream</th>
                      <th className="text-center p-3 font-medium">Position</th>
                    </tr>
                  </thead>
                  <tbody>
                    {students.slice(0, 3).map((student, index) => (
                      <tr key={`${student.student_id}-${index}`} className="border-t border-gray-100">
                        <td className="p-3 font-medium">{student.student_name}</td>
                        <td className="p-3 text-right">
                          <span className="inline-flex items-center px-2 py-1 rounded-md bg-blue-50 text-blue-700">
                            {student.average.toFixed(1)}%
                          </span>
                        </td>
                        <td className="p-3 text-right">{student.total.toFixed(1)}</td>
                        <td className="p-3">{student.stream}</td>
                        <td className="p-3 text-center">
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold ${
                            student.position === 1 ? 'bg-yellow-100 text-yellow-800' :
                            student.position === 2 ? 'bg-gray-100 text-gray-800' :
                            'bg-orange-100 text-orange-800'
                          }`}>
                            #{student.position}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          ))}
        </section>
      )}

      {/* Subject Champions per Class */}
      {Object.keys(groupedChampions).length > 0 && (
        <section className="space-y-4">
          <h2 className="text-xl font-bold text-gray-900">Subject Champions per Class</h2>
          {Object.entries(groupedChampions).map(([className, champions]) => (
            <div key={className} className="bg-white border border-gray-200 rounded-xl overflow-hidden">
              <div className="p-4 border-b border-gray-200 bg-gray-50">
                <h3 className="text-lg font-semibold">Class: {className}</h3>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full text-sm">
                  <thead className="bg-gray-50 text-gray-600">
                    <tr>
                      <th className="text-left p-3 font-medium">Student Name</th>
                      <th className="text-left p-3 font-medium">Stream</th>
                      <th className="text-right p-3 font-medium">Marks</th>
                      <th className="text-left p-3 font-medium">Subject</th>
                    </tr>
                  </thead>
                  <tbody>
                    {champions.map((champion, index) => (
                      <tr key={`${champion.student_name}-${index}`} className="border-t border-gray-100">
                        <td className="p-3 font-medium">{champion.student_name}</td>
                        <td className="p-3">{champion.stream}</td>
                        <td className="p-3 text-right">
                          <span className="inline-flex items-center px-2 py-1 rounded-md bg-green-50 text-green-700">
                            {champion.marks.toFixed(1)}%
                          </span>
                        </td>
                        <td className="p-3">{champion.subject}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          ))}
        </section>
      )}

      {/* Stream Rankings */}
      {dashboardData.stream_rankings.length > 0 && (
        <section className="bg-white border border-gray-200 rounded-xl overflow-hidden">
          <div className="p-4 border-b border-gray-200 bg-gray-50">
            <h2 className="text-xl font-bold text-gray-900">Stream Rankings</h2>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-50 text-gray-600">
                <tr>
                  <th className="text-left p-3 font-medium">Class Name</th>
                  <th className="text-left p-3 font-medium">Stream</th>
                  <th className="text-right p-3 font-medium">Average</th>
                  <th className="text-center p-3 font-medium">Grade</th>
                  <th className="text-center p-3 font-medium">Position</th>
                </tr>
              </thead>
              <tbody>
                {dashboardData.stream_rankings.map((ranking, index) => (
                  <tr key={`${ranking.class_name}-${index}`} className="border-t border-gray-100">
                    <td className="p-3 font-medium">{ranking.class_name}</td>
                    <td className="p-3">{ranking.stream}</td>
                    <td className="p-3 text-right">
                      <span className="inline-flex items-center px-2 py-1 rounded-md bg-blue-50 text-blue-700">
                        {ranking.average.toFixed(1)}%
                      </span>
                    </td>
                    <td className="p-3 text-center">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold ${
                        ranking.grade === 'A+' || ranking.grade === 'A' ? 'bg-green-100 text-green-800' :
                        ranking.grade === 'B' ? 'bg-blue-100 text-blue-800' :
                        ranking.grade === 'C' ? 'bg-yellow-100 text-yellow-800' :
                        ranking.grade === 'D' ? 'bg-orange-100 text-orange-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {ranking.grade}
                      </span>
                    </td>
                    <td className="p-3 text-center">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold ${
                        ranking.position <= 3 ? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-800'
                      }`}>
                        #{ranking.position}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>
      )}
    </div>
  )
}

function StatCard({ label, value, color }: { label: string; value: string | number; color: string }) {
  return (
    <div className={`rounded-xl border border-gray-200 bg-white p-4`}>
      <div className="text-xs text-gray-500">{label}</div>
      <div className={`mt-2 inline-flex items-center rounded-md px-2.5 py-1 text-sm font-semibold ${color}`}>
        {value}
      </div>
    </div>
  )
}
